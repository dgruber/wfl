package main

import (
	"fmt"
	"os"

	"github.com/dgruber/drmaa2interface"
	"github.com/dgruber/wfl"
)

func main() {
	fmt.Println("Three examples of using LLMs with wfl:")
	OutputTransformationFlow()
	ErrorDescriptionFlow()
	TemplatePExampleFlow()
}

// OutputTransformationFlow shows how to apply a prompt to the output of a job.
func OutputTransformationFlow() {
	flow := wfl.NewWorkflow(wfl.NewProcessContext()).WithLLMOpenAI(
		wfl.OpenAIConfig{
			Token: os.Getenv("OPENAI_KEY"),
		}).OnErrorPanic()

	job := flow.RunT(drmaa2interface.JobTemplate{
		RemoteCommand: "/bin/bash",
		Args: []string{
			"-c",
			`uname -a`,
		},
		OutputPath: "/tmp/output.txt",
	}).OnErrorPanic()

	// Convert the output of "uname -a" into a more descriptive
	// english sentence.
	fmt.Printf("%s\n", job.OutputP("What is this for a system?"))
}

// ErrorDescriptionFlow shows how to apply a prompt to an error message.
func ErrorDescriptionFlow() {
	flow := wfl.NewWorkflow(wfl.NewProcessContext()).WithLLMOpenAI(
		wfl.OpenAIConfig{
			Token: os.Getenv("OPENAI_KEY"),
		}).OnErrorPanic()

	job := flow.RunT(drmaa2interface.JobTemplate{
		RemoteCommand: "/bin/bsh", // NOTE: This is the job error here!
		Args: []string{
			"-c",
			"echo 'Hello World!'",
		},
		OutputPath: "/tmp/output.txt",
	})
	if job.Errored() {
		// The job had a submission error. Try to get a description and
		// a solution from the LLM.
		fmt.Println(job.ErrorP("Explain the job error and provide a solution"))
	} else {
		fmt.Printf("Ups...This job should have failed\n")
	}
}

// TemplatePExampleFlow shows how to apply a prompt to generate a job template.
func TemplatePExampleFlow() {

	flow := wfl.NewWorkflow(wfl.NewProcessContext()).WithLLMOpenAI(
		wfl.OpenAIConfig{
			Token: os.Getenv("OPENAI_KEY"),
		}).OnErrorPanic()

	// Create a job template which runs a bash command for macOS which is
	// generated by the prompt.
	jt, err := flow.TemplateP("What time is it and what is the weather in Munich?",
		wfl.TemplatePromptTypeDarwinShellScript)
	if err != nil {
		panic(err)
	}

	fmt.Printf("Run bash command:\n%s\n", jt.Args[1])

	var applyTemplate string
	fmt.Printf("Check carefully the command! Run? (y/n): ")
	fmt.Scanln(&applyTemplate)
	if applyTemplate != "y" {
		fmt.Println("Do NOT apply template.")
		return
	}
	fmt.Println("Apply template.")

	job := flow.NewJob().RunT(jt).OnErrorPanic().Wait()

	fmt.Printf("Output:\n%s\n", job.Output())
	fmt.Printf("Translation:\n%s\n",
		job.OutputP("Translate the output into Boarisch (kind of German)"))
}
